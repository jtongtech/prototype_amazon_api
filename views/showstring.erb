<!DOCTYPE html>
<style>
.upload {
	width: 50%;
}
</style>
<html>
<center>
		<h1>BASE 64</h1>
	<body>

	<!-- <img src="data:image/png;base64," + <%=showstring%> > -->
	<%=showstring%>
	</body>

	<label class="add_file file_input androidQuery">
        <input accept="image/*" class="upload" id="photo" type="file" capture="camera">
    </label>

    <div id="image_preview"></div>

	</center>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.0/jquery.min.js"></script>
</html>
<script type="text/javascript">



	var input = document.querySelector("#photo");  // used for getting photo data
	var resizedImage = {}; // Array to hold resized photo file - used by processPhoto()

	$(document).on("change", "#photo", processPhoto);  // call processPhoto() to preview when image selected


	function processPhoto() {

    var file = input.files[0]; // retrieve file data
    var fileName = file["name"].slice(0, -4) + ".png"; // image name to use with blob (resized output = PNG)

    //---- determine file signature via magic numbers ----
    getMimeType(file, evaluateMimeType); // fire off MIME type retrieval (asynchronous)

    // Callback function called in getMimeType() to evaluate mimeType for uploaded file
    function evaluateMimeType(mimeType) {
        if (mimeType === "unknown") {
            showMessagingModal("Invalid file type - please load a valid image file!");
        } else {

            if (document.getElementById("image_container")) {
                $('#image_container').remove();  // clear exising image if another selected
            }

            url = URL.createObjectURL(file);

            resizeImage(url, getBase64String); // fire off base64-encoded image string retrieval (asynchronous)

            // Callback function called in resizeImage() to get resized base64-encoded image string and output to div
            function getBase64String(resized) {

                var stringDataTypeFull = resized.split(';')[0];
                var stringDataType = stringDataTypeFull.split(':')[1]; // get data type for blob conversion
                var stringBase64 = resized.split(',')[1]; // get base64 string for blob conversion
                var blob = b64toBlob(stringBase64, stringDataType); // encode base64 string as blob for PouchDB put
                var blobUrl = URL.createObjectURL(blob); // create URL for previewing image on View Current Audit page
                
                var img = document.createElement("img");
                img.src = blobUrl;
                img.className = "img_styling";

                var div = document.createElement("div");
                div.id = "image_container";
                div.className = "img_container";
                div.appendChild(img);

                document.getElementById("image_preview").appendChild(div);

                resizedImage = { filename: fileName, data: resized };
            }
        }
    }
}

function getMimeType(file, callback) {

    var fileReader = new FileReader(); // instantiate new FileReader object

    fileReader.onloadend = function(e) { // after file is loaded...
        var arr = (new Uint8Array(e.target.result)).subarray(0, 4); // get file signature
        var header = ""; // tranlsate file signature from decimal to hex for easier comparison
        for (var i = 0; i < arr.length; i++) { header += arr[i].toString(16); }
        var mimeType = evaluateFileSignature(header);
        callback(mimeType); // retrieve mimeType for evaluation via evaluateMimeType()
    };

    fileReader.readAsArrayBuffer(file); // asynchronous function call
}

function evaluateFileSignature(headerString) {

    switch (headerString) {
        case "89504e47":
            type = "image/png";
            break;
        case "47494638":
            type = "image/gif";
            break;
        case "ffd8ffe0":
        case "ffd8ffe1":
        case "ffd8ffe2":
            type = "image/jpeg";
            break;
        default:
            type = "unknown";
            break;
    }

    return type;
}

function resizeImage(url, callback) {

    var img = new Image;
    var canvas = document.createElement("canvas");
    var ctx = canvas.getContext("2d");
    var cw = canvas.width;
    var ch = canvas.height;
    var maxW = 800; // limit the image to 250x250 maximum size
    var maxH = 800;

    img.onload = function() {
        var iw = img.width;
        var ih = img.height;
        var scale = Math.min((maxW / iw), (maxH / ih));
        var iwScaled = iw * scale;
        var ihScaled = ih * scale;
        canvas.width = iwScaled;
        canvas.height = ihScaled;
        ctx.drawImage(img, 0, 0, iwScaled, ihScaled);
        resized = canvas.toDataURL(); // converted image as base64-encoded string
        callback(resized);
    }

    img.src = url
}

function b64toBlob(b64Data, contentType, sliceSize) {

    var contentType = contentType || '';
    var sliceSize = sliceSize || 512;
    var byteCharacters = atob(b64Data);
    var byteArrays = [];

    for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {

        var slice = byteCharacters.slice(offset, offset + sliceSize);
        var byteNumbers = new Array(slice.length);
        for (var i = 0; i < slice.length; i++) {
            byteNumbers[i] = slice.charCodeAt(i);
        }
        var byteArray = new Uint8Array(byteNumbers);

        byteArrays.push(byteArray);
    }

    var blob = new Blob(byteArrays, { type: contentType });
    return blob;
}
</script>